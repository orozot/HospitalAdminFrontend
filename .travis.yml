#language: node_js #设置语言
#
#node_js: "12.12.0" #设置语言版本
#
#cache:
#  directories:
#    - node_modules #缓存依赖
#
#addons:
#  ssh_known_hosts:
#    - 'HOST_IP' #受信主机，你的Linux服务器ip
## S: Build Lifecycle
#install:
#  - npm install
#
#script:
#  - npm run build:prod
#
#after_script:
#  - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
#  - docker build -t hospitalfrontend .
#  - docker images
#  - docker tag hospitalfrontend orozot/his:lastest
#  - docker push $DOCKER_USERNAME/his:lastest
#
#after_success:
#  - chmod 600 ~/.ssh/id_rsa   #还是Linux文件权限问题
#  - ssh travis@HOST_IP -o StrictHostKeyChecking=no './build/deploy.sh'   #使用ssh连接服务器
##jobs:
##  include:
##    - stage: build
##      install: npm install
##      script: npm run build:prod
##    - stage: docker build
##      script:
##      - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
##      - docker build -t hospitalfrontend .
##      - docker images
##      - docker tag hospitalfrontend orozot/his:lastest
##      - docker push $DOCKER_USERNAME/his:lastest
##    - stage: docker deploy
##      script:
##        - chmod 600 ~/.ssh/id_rsa   #还是Linux文件权限问题
##        - ssh travis@HOST_IP -o StrictHostKeyChecking=no './build/deploy.sh'   #使用ssh连接服务器
#
##after_script前5句是把部署分支的.git文件夹保护起来，用于保留历史部署的commit日志，否则部署分支永远只有一条commit记录。
##命令里面的变量都是在Travis CI里配置过的。
##after_script:
##  - git clone https://${GH_REF} .temp
##  - cd .temp
##  - git checkout gh-pages
##  - cd ../
##  - mv .temp/.git dist
##  - cd dist
##  - git config user.name "${U_NAME}"
##  - git config user.email "${U_EMAIL}"
##  - git add .
##  - git commit -m ":construction_worker:- Build & Deploy by Travis CI"
##  - git push --force --quiet "https://${Travis_Token}@${GH_REF}" gh-pages:${D_BRANCH}
## E: Build LifeCycle
#before_install:
#  - openssl aes-256-cbc -K $encrypted_f217180e22ee_key -iv $encrypted_f217180e22ee_iv -in id_rsa.enc -out ~/.ssh/id_rsa -d
## 只有指定的分支提交时才会运行脚本
#branches:
#  only:
#    - master


language: node_js #设置语言

node_js: "12.12.0" #设置语言版本

cache:
  directories:
    - node_modules #缓存依赖
before_install:
  - openssl aes-256-cbc -K $encrypted_f217180e22ee_key -iv $encrypted_f217180e22ee_iv -in id_rsa.enc -out ~/.ssh/id_rsa -d
# S: Build Lifecycle
install:
  - npm install

script:
  - npm run build:prod

#after_script前5句是把部署分支的.git文件夹保护起来，用于保留历史部署的commit日志，否则部署分支永远只有一条commit记录。
#命令里面的变量都是在Travis CI里配置过的。
after_script:
  - docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
  - docker build -t hospitalfrontend .
  - docker images
  - docker tag hospitalfrontend orozot/his:lastest
  - docker push $DOCKER_USERNAME/his:lastest

# E: Build LifeCycle
after_success:
  - chmod 600 ~/.ssh/id_rsa   #还是Linux文件权限问题
  - ssh travis@HOST_IP -o StrictHostKeyChecking=no './build/deploy.sh'   #使用ssh连接服务器

branches:
  only:
    - master
